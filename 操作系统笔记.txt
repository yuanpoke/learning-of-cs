操作系统 operating system（os）

10/21

什么是操作系统？
  对上，操作系统是一个控制软件，管理应用程序
  对下，进行硬件资源管理

  “把CPU抽象成进程，磁盘抽象成文件，内存抽象成地址空间”，
  从而供用户更好更便捷地使用
  
  层次结构：硬件之上，应用软件之下，用户之下
  操作系统是系统软件

  （有两种接口，shell和kernel。shell包括gui和命令行程序
    Linux, Windows, Android的界面属于外壳shell，
    内核kernel是本课学习重点）

计算机系统的层次结构：
     硬件
     操作系统
应用程序 用户（直接接触操作系统）
     用户

1.系统资源的管理者：处理机管理，存储器管理，文件管理，
                    设备管理
2.用户和计算机硬件之间的接口（用户接口）：
    命令接口：允许用户直接使用
      联机命令接口（交互式命令接口）：用户说一句，系统做一句
      脱机命令接口（批处理命令接口）：用户说一堆，系统做一堆
    程序接口：允许用户通过程序间接使用
      由一组系统调用组成，程序接口=系统调用=广义指令，如在程
      序中调用dll
    GUI：图形用户界面
3.对硬件资源的扩展：覆盖了软件的机器称为扩充机器，又称为虚拟机。

**现在很多CPU都是多核的


#系统调用

**系统调用会使处理器从用户态到核心态
**应用程序通过系统调用请求操作系统的服务。凡是与资源有关的操作，
  都必须通过系统调用，从而保证系统的稳定性和安全性。系统调用的
  相关处理需要在核心态下进行（因为需要特权指令）。
系统调用（按功能分类）
  1. 设备管理（这个别忘）
  2. 文件管理
  3. 进程管理
  4. 进程通信
  5. 内存管理
**有的库函数涉及系统调用，有的没涉及。如：取绝对值的库函数不涉及；
  而创建一个新文件的库函数涉及系统调用。
**系统调用背后的过程：
    传递系统调用参数->执行陷入指令trap（用户态）->执行系统调用相应
    服务程序（核心态）->返回用户程序
    **发出系统调用请求是在用户态，系统调用的相应处理在核心态。
    **陷入指令是唯一一个只能在用户态执行，而不可在核心态执行的指令。



#操作系统的四大特征：
  **并发和共享是最基本的特征，互为存在条件的。
  **如果没有并发和共享就谈不上虚拟和异步。
  1. 并发
       并发和并行：并发是一段时间多个程序，并行是同一
                   时刻多个程序。      
  2. 共享：资源可供内存中多个并发执行的进程共同使用
        互斥共享：一个时间段只能一个进程访问资源
        同时共享：一个时间段可以有多个进程访问资源
  3. 虚拟
       一台物理机器虚拟成多台虚拟机器
       空分复用技术：如虚拟存储器技术
       时分复用技术：如虚拟处理器
  4. 异步
       走走停停，不知道向前推进的速度。
       但只要运行环境相同，os要保证程序的运行结果（
       如1+1=2这个结果是不能变的）相同。
      
操作系统实例：
  1.UNIX BSD
      UNIX -> BSD
  2.LINUX(在其学生时代写的)
      -> redhat, ubuntu
  3.Windows
  4.ios  macos
  5.Android

  计算机桌面Windows大多，服务器、终端Linux大多




汇编语言是基于具体的硬件的，很难移植
CS：段寄存器

操作系统结构：
  1.简单操作系统：MS-DOS
      不分模块的单体内核
  2.微内核 只把必要的放在内核中
      但是需要多次进行移除和移进，效率降低
  
#操作系统的启动：
  DISK：存放操作系统，bootloader
  BIOS: 基本I/O处理系统，上电后检测外设，加载软件，把
        bootloader加载到内存中
  bootloader：加载os
  
  POST（加电自检），寻找显卡和执行BIOS


#中断

**本质：发生中断就意味着需要操作系统介入，开展管理工作





#进程
  
**程序：指令序列

**程序段、数据段、PCB组成进程实体（进程映像），进程实体
  简称为进程。创建进程，实质上就是创建进程实体中的PCB，
  撤销进程实质上就是撤销进程实体中的PCB。

**PCB是进程存在的唯一标准。

进程定义：
  定义均强调了动态性，动态性是进程最基本的特征
  1. 进程是程序的一次执行过程。
  2. 进程是一个程序及其数据在处理机上顺序执行时所
     发生的活动。
  3. 进程是具有独立功能的程序在数据集合上运行的过程，
     是系统进行资源分配和调度的一个独立单位。  
  4. 进程是进程实体的运行过程，是系统进行资源分配和调度
     的一个独立单位。

  任务管理器中各个进程。

  严格来说，两者不一样，进程实体是静态的，进程是动态的。
  但是一般认为两者一样，可以说进程由程序段、数据段、PCB
  三部分组成。

PCB的组成：进程的管理者（os）所需的数据都在PCB中，而程序
           本身的允许所需数据在程序段和数据段中
  1. 进程描述信息
       进程标识符PID：操作系统分配的唯一的不重复的ID
       用户标识符UID
  2. 进程控制和管理信息
       进程当前状态
       进程优先级
  3. 资源分配清单
       程序段指针
       数据段指针
       键盘
       鼠标
  4. 处理机相关信息
       各种寄存器值：进程会切换故需要保存在PCB中

进程的组织方式：多个进程之间的组织方式
  1. 链接方式：
       按照进程状态将PCB分为多个队列，os持有指向
       各个队列的指针。队列之间用指针连接。
         执行指针：指向运行态的进程
         就绪队列指针：指向就绪态的进程
         阻塞队列指针：指向阻塞态的进程
       
  2. 索引方式：
       按照进程状态的不同，建立几张索引表，os持有
       指向各个索引表的指针。
         执行指针
         就绪表指针
         阻塞表指针

进程的特征：
  1. 动态性：进程是程序的一次执行
  2. 并发性：
  3. 独立性：独立运行、获得资源、接受调度
             进程是资源分配、接受调度的基本单位。
  4. 异步性：
  5. 结构性：每个进程都有一个PCB，由程序段、数据段和
             PCB组成

进程的状态：
  三种基本状态：
    1. 运行态：占有CPU
         双核环境可以有两个进程在运行态
    2. 就绪态：拥有除CPU外所有资源
    3. 阻塞态（等待态）：缺少某一资源和CPU
  另外两种状态：
    1. 创建态：进程正在被创建，os为其分配资源，初始化PCB
    2. 结束态（终止态）：进程正在撤销，os回收资源，撤销PCB

进程状态的转换：
  就绪态->运行态：进程被调度
  运行态->就绪态：时间片到，或CPU被高优先级进程抢占
  运行态->阻塞态：等待资源分配或某时间发生     
  阻塞态->就绪态：资源分配到位或等待的事件发生

  运行态到阻塞态是进程自身做出的主动行为
  阻塞态到就绪态不是进程自身控制的，是被动的

  不能由阻塞态直接到运行态，也不能由就绪态直接到阻塞态。



10/22

#进程控制：
  进程控制就是实现进程状态的转换
  PCB修改、队列移动，资源分配/回收
  
用原语实现进程控制。原语的特点是执行期间不允许中断。
这种不允许中断的操作称为原子操作。
原语采用关中断指令和开中断指令实现。该两项指令权限
非常高，是只允许在核心态下执行的特权指令。原语属于
核心态，运行在核心态下。
原语是一种特殊的程序。

  关中断指令
  原语代码1
  原语代码2
  开中断指令
  代码3
  代码4

所有原语都做三类事情：
  修改PCB，修改队列，分配/回收资源


进程的创建：
  1. 创建原语：
       申请空白PCB
       分配资源
       初始化PCB
       将PCB插入就绪队列
  2. 引起进程创建的事件：
       用户登录：分时系统中，会为新用户建立进程
       作业调度：多道批处理系统中，当有新作业放入内存中时，
       提供服务
       应用请求

进程的终止：
  1. 撤销原语：
       找到PCB
       若进程正在运行，剥夺CPU
       终止其所有子程序
       回收资源
       删除PCB
  2. 引起进程终止的事件：
       正常结束
       异常结束
       外界干预

进程的阻塞：
  1. 阻塞原语：
       找到PCB
       保护运行现场，PCB状态信息设置为阻塞态，暂停进程
       将PCB插入相应事件的等待队列
  2. 引起进程阻塞的事件：
       等待分配资源
       等待其他进程完成工作（某个事件发生）

进程的唤醒：
  1. 唤醒原语：
       找到PCB
       从等待队列移除，进程状态设置为就绪态
       PCB插入就绪队列
  2. 引起进程唤醒的事件：
       等待的事件发生

**阻塞原语和唤醒原语必须成对地使用，因为都是由于一个等待事件



#进程通信：进程通信就是进程之间的信息交换

**因为进程是分配资源的单位，各进程拥有的内存空间独立。
为了安全，一个进程不能直接访问另一个进程的地址空间。
因此需要进程通信。
  
  1. 共享存储
       **为通信的进程分配一个共享空间（多个进程对其访问必须是互斥的）
       使用P、V操作

       a. 基于数据结构的共享
            （如长度为10的数组）速度慢、限制多，低级通信
       b. 基于存储区的共享
            存储区中数据的形式、位置都由进程控制而不是os
            速度更快，高级通信
  2. 消息传递
       **数据交换以格式化的消息为单位。通过“发送消息/接收消息”两个
         原语进行数据交换。格式化信息包括消息头和消息体。
       
       a. 直接通信方式
            消息直接挂到接收进程的消息缓冲队列上
       b. 间接（信箱）通信方式
            先发送到中间实体（信箱），因此也称为信箱通信方式
  3. 管道通信
       a. 管道是一个共享文件，pipe文件。是在内存中开辟一个大小
          固定的缓冲区。
       b. 管道只能采用半双工通信。如果要实现双向同时通信，要设置
          两个管道。各个进程要互斥地访问管道。
       c. 数据以字符流的形式写入管道，当管道写满时，写进程的write（）
          系统调用将被阻塞，等待读进程将数据取走。当读进程将数据全部
          取走后，管道变空，读进程的read（）系统调用将被阻塞。
       d. 如果没有写满，就不允许读。如果没有读空，就不允许写。
       e. 数据一旦被读出，就会被抛弃，故读进程最多只能有一个，否在可能
          会读错数据。


#线程
**两个进程QQ和音乐，而QQ进程中又有视频、传送文件两个线程
**在传统的进程中只能串行地执行程序，通过引入线程来增加并发
**传统的进程是程序执行流的最小单位，现在线程是程序执行流的最小单位
**线程可以理解为“轻量级进程”，线程是一个基本的CPU执行单元
**引入线程后，进程是资源分配的基本单位，线程是调度的基本单位
**相比进程间并发，线程间并发如果在同一进程内线程切换，不需要切换进程
  环境，系统开销小。
**引入后并发性和系统开销都变好了


#线程的属性：
  1. 每个线程都有线程ID、线程控制块TCB
  2. 线程也有就绪、阻塞、运行三种基本状态
  3. 几乎不拥有系统资源
  4. 同一进程不同线程共享进程资源
  5. 共享内存地址空间，线程通信甚至无需系统干预
  6. 不同进程中的线程切换会引起进程切换


#线程的实现方式
  1. 用户级线程ULT
       a. 由应用程序通过线程库实现，所有的线程管理工作都由应用
          程序负责（包括线程切换）
       b. 线程切换在用户态下即可完成，无需操作系统干预
       c. 用户级线程对用户不透明，对操作系统透明
  2. 内核级线程KLT
       a. 线程的管理工作由操作系统内核完成，内核级线程的
          切换必须在核心态下完成
  3. 在同时支持用户级线程和内核级线程的系统中，可采用两者结合的方式，
     将n个用户级线程映射到m个内核级线程上（n>=m）
     **os只“看得见”内核级线程，因此只有内核级线程才是处理机
       分配的单位。若某进程有两个内核级线程，三个用户级线程，在用户看来，该进程
       只有三个线程。但即使在4核处理机上运行，最多只能被分配到两个核，
       最多只有两个用户级线程并行执行。






















